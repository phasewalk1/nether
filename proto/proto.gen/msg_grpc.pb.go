// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: msg.proto

package proto_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Messenger_Send_FullMethodName     = "/sb.messenger.Messenger/Send"
	Messenger_Get_FullMethodName      = "/sb.messenger.Messenger/Get"
	Messenger_Sent_FullMethodName     = "/sb.messenger.Messenger/Sent"
	Messenger_Received_FullMethodName = "/sb.messenger.Messenger/Received"
)

// MessengerClient is the client API for Messenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessengerClient interface {
	Send(ctx context.Context, in *MsgInTransit, opts ...grpc.CallOption) (*SendResponse, error)
	Get(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*Msg, error)
	Sent(ctx context.Context, in *SentMsgsRequest, opts ...grpc.CallOption) (*MultiMsgResponse, error)
	Received(ctx context.Context, in *ReceivedMsgsRequest, opts ...grpc.CallOption) (*MultiMsgResponse, error)
}

type messengerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerClient(cc grpc.ClientConnInterface) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) Send(ctx context.Context, in *MsgInTransit, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, Messenger_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) Get(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, Messenger_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) Sent(ctx context.Context, in *SentMsgsRequest, opts ...grpc.CallOption) (*MultiMsgResponse, error) {
	out := new(MultiMsgResponse)
	err := c.cc.Invoke(ctx, Messenger_Sent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) Received(ctx context.Context, in *ReceivedMsgsRequest, opts ...grpc.CallOption) (*MultiMsgResponse, error) {
	out := new(MultiMsgResponse)
	err := c.cc.Invoke(ctx, Messenger_Received_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessengerServer is the server API for Messenger service.
// All implementations should embed UnimplementedMessengerServer
// for forward compatibility
type MessengerServer interface {
	Send(context.Context, *MsgInTransit) (*SendResponse, error)
	Get(context.Context, *MsgRequest) (*Msg, error)
	Sent(context.Context, *SentMsgsRequest) (*MultiMsgResponse, error)
	Received(context.Context, *ReceivedMsgsRequest) (*MultiMsgResponse, error)
}

// UnimplementedMessengerServer should be embedded to have forward compatible implementations.
type UnimplementedMessengerServer struct {
}

func (UnimplementedMessengerServer) Send(context.Context, *MsgInTransit) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMessengerServer) Get(context.Context, *MsgRequest) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMessengerServer) Sent(context.Context, *SentMsgsRequest) (*MultiMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sent not implemented")
}
func (UnimplementedMessengerServer) Received(context.Context, *ReceivedMsgsRequest) (*MultiMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Received not implemented")
}

// UnsafeMessengerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessengerServer will
// result in compilation errors.
type UnsafeMessengerServer interface {
	mustEmbedUnimplementedMessengerServer()
}

func RegisterMessengerServer(s grpc.ServiceRegistrar, srv MessengerServer) {
	s.RegisterService(&Messenger_ServiceDesc, srv)
}

func _Messenger_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInTransit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messenger_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).Send(ctx, req.(*MsgInTransit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messenger_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).Get(ctx, req.(*MsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_Sent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentMsgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).Sent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messenger_Sent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).Sent(ctx, req.(*SentMsgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_Received_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivedMsgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).Received(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messenger_Received_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).Received(ctx, req.(*ReceivedMsgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Messenger_ServiceDesc is the grpc.ServiceDesc for Messenger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messenger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sb.messenger.Messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Messenger_Send_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Messenger_Get_Handler,
		},
		{
			MethodName: "Sent",
			Handler:    _Messenger_Sent_Handler,
		},
		{
			MethodName: "Received",
			Handler:    _Messenger_Received_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}
